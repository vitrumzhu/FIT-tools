'use client'

import Head from "next/head";
import { motion } from "framer-motion";
import ViewSwitch from "../../components/viewSwitch";
import React, { useState } from "react";
import { FileUploader } from "react-drag-drop-files";
var FitParser = require("fit-file-parser").default;
import ChartOverlayed from "../../components/chartOverlayed";
import ChartStacked from "../../components/chartStacked";
import RangeInput from '../../components/rangeInput';
import { merageWindSpeedAndTemperature, updateCdA } from "../../utils";
// File dropper file extension config
const fileTypes = ["FIT"];
const windFileTypes = ["TJF"];

export default function About() {
  const [data, setData] = React.useState(null);
  const [windData, setWindDate] = React.useState(null);

  const [ccr, setCcr] = React.useState(366);
  const [dte, setDte] = React.useState(965);
  const [weight, setWeight] = React.useState(80);
  
  // Add state for other input values

  const handleCcrChange = (value) => {
    setCcr(value);
  };

  const handleDteChange = (value) => {
    setDte(value);
  };
  const handleWeightChange = (value) => {
    setWeight(value);
  };

  

  // Handle dropzone change
  const handleChange = (data, file) => {
    setData({ fileName: file.name, data: data });

    // Log the data for inspection
    console.log(data);
  };

  const handleWind = async (inData) => {
    
    setWindDate(inData);
    const bindData = updateWindData({windData:inData, baseData:data.data, ccr, dte, weight});
    // console.log('handleWind', data, bindData);
  
    const updatedBasedata = {
      ...data,
      data: {
        ...data.data,
        records: bindData,
      }
    };

    // 创建包含更新后的整个state的副本
    const updatedState = {
      ...data,
      data: updatedBasedata
    };

    console.log(updatedBasedata);
    // 使用setState来更新整个state对象
    setData(updatedBasedata);
  };

  // Reset data
  const startOver = () => {
    setData(null);
  };

  // Framer motion variants for subtle animation
  const variants = {
    hidden: { opacity: 0, y: 24 },
    show: { opacity: 1, y: 0 },
  };

  return (
    <div className="min-h-full flex flex-col justify-start items-center text-white p-3 sm:p-6 bg-black-700 static">
      <Head>
        <title>CdA Analyzer</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <motion.div
        variants={variants}
        initial="hidden"
        animate="show"
        className="mb-4 text-left flex items-start w-full flex-col sm:flex-row"
      >
        {!data ? <LandingHeader /> : <DataHeader data={data} />}
      </motion.div>
      {data ? (
        <>
          
          <DroppedFile
            data={data.data}
            name={data.fileName}
            startOver={startOver}
          />
          <DragWindDrop onChange={handleWind}/>
        </>
      ) : (
        <DragDrop onChange={handleChange} />
      )}
      <div class="max-w-lg p-4 absolute top-0 right-0">
        <details class="open:bg-white dark:open:bg-slate-900 open:ring-1 open:ring-black/5 dark:open:ring-white/10 open:shadow-lg p-6 rounded-lg text-slate-900" open >
          <summary class="text-sm leading-6 text-gray-900 dark:text-white bg-white font-semibold select-none p-4 rounded-lg">CdA Calculator setup</summary>
          <RangeInput
            label="Weight of rider + bike ="
            min={6.8}
            max={200}
            defaultValue={80}
            onValueChange={handleWeightChange}
            fixValue={1}
            fixLevel={2}
            symbol={'kg'}
          />
          <RangeInput
            label="Rolling resistance coefficient CRR ="
            min={150}
            max={650}
            defaultValue={366}
            fixValue={100000}
            fixLevel={5}
            onValueChange={handleCcrChange}
          />
          <RangeInput
            label="Drivetrain efficiency ="
            min={900}
            max={1000}
            defaultValue={965}
            onValueChange={handleDteChange}
            fixValue={10}
            fixLevel={2}
            symbol={'%'}
          />
          
          {/* Add more RangeInput components for other input values */}
          <div className="mt-4">
            <p>Weight of rider + bike: {Number(weight).toFixed(2)} kg</p>
            <p>Rolling resistance coefficient CRR: {(ccr / 100000).toFixed(5)}</p>
            <p>Drivetrain efficiency: {(dte / 10).toFixed(2)} %</p>
            {/* Display other input values */}
          </div>

        </details>
      </div>
      
    </div>
  );
}
function upLoadWindFile () {
  console.log(windData);
}
function updateWindData({windData, baseData, weight, ccr, dte}) {
  // console.log('updateWindData 1', windData, 'baseData', baseData);
  let mergedWindData = merageWindSpeedAndTemperature(windData);
  // console.log('meraged windData', merageWindSpeedAndTemperature(windData));

  // // 使用reduce()方法遍历array1
  // const matchedResults = baseData.records?.reduce((result, obj1) => {
  //   // console.log('timestamp baseData', obj1.timestamp)
  //   // 将array2中的时间戳字段转换为与array1相同的格式，然后进行比较
  //   const matchingObj = windData.channels[1].values.find(obj2 => {
  //     // console.log('timestamp', obj2.timeStamp)
  //     // 将array2中的时间戳字段转换为Date对象
  //     const date2 = new Date( Number(obj2.timeStamp) * 1000);
  //     // 将array1中的时间戳字段转换为Date对象
  //     const date1 = new Date(obj1.timestamp);
  //     // 比较两个Date对象是否相等
  //     // console.log('timestamp', obj1.timestamp, obj2.timeStamp, date2, date1)
  //     return date1.getTime() === date2.getTime();
  //   });
  //   if (matchingObj) {
  //     obj1.windSpeed = matchingObj.value * 3.6;
  //     result.push(obj1);
  //   }
    
  //   return result;
  // }, []);
  let matchedResults = [];
  for (let item of baseData.records) {
    const date1 = new Date(item.timestamp).getTime() / 1000;
    // console.log(date1, mergedWindData);
    if (mergedWindData[date1]){
      item.windSpeed = (Number(mergedWindData[date1].windSpeed) * 3.6) || 0;
      item.windTemperature = mergedWindData[date1].windTemperature || 0;
      item.cda = Number(updateCdA({
        temperature: Number(item.windTemperature), 
        altitude: (Number(item.altitude) * 1000).toFixed(0) || 1,
        crr: Number(ccr),
        dte: Number(dte),
        windSpeed: Number(item.windSpeed).toFixed(2),
        weight: Number(weight),
        power: Number(item.power) || 0,
      })) || 0;
    }
    matchedResults.push(item);
  }
  console.log('match obj', matchedResults);
  return matchedResults;
  // matchedResults数组现在包含了匹配的结果
  // console.log(matchedResults);
}

function DragWindDrop({onChange}) {
  const [fileOrFiles, setFile] = useState(null);
  const [isDragWindOver, setIsDragWindOver] = React.useState(false);
  const handleDragWindStateChange = (ev) => {
    setIsDragWindOver(ev);
  };
  const handleChange = (file) => {
    setFile(file);

    const reader = new FileReader();

    reader.readAsText(file);
    reader.onload = (e) => {
      // console.log(e.target.result, JSON.parse(reader.result))
      if (e?.target?.result) {
        let result = JSON.parse(reader.result)
        // console.log(result.channels[1]?.values);
        onChange(result, file);
      }
    };
  };
  return (
    <FileUploader
      handleChange={handleChange}
      classes="h-full w-full flex-1"
      name="file"
      types={windFileTypes}
      label={false}
      fileOrFiles={fileOrFiles}
      hoverTitle={false}
      multiple={false}
      onDraggingStateChange={handleDragWindStateChange}
    >
      <DropWindZone />
    </FileUploader>
  );
}

function DropWindZone({ }) {
  return (
    <div
      className={`bgroup cursor-pointer text-white flex flex-col items-center justify-center p-12 border-dashed border-2 border-slate-300 rounded-md border h-full absolute w-full border-opacity-30`}
    >
      <h1 className={`text-lg text-center`}>
        Drag and drop a Wind JSON file, or <span className="underline">browse</span>
      </h1>
    </div>
  );
}

function DragDrop({ onChange }) {
  const [fileOrFiles, setFile] = useState(null);
  const [isDragOver, setIsDragOver] = React.useState(false);
  const handleDragStateChange = (ev) => {
    setIsDragOver(ev);
  };
  const handleChange = (file) => {
    setFile(file);

    const reader = new FileReader();

    reader.readAsArrayBuffer(file);
    reader.onload = (e) => {
      var fitParser = new FitParser({
        force: true,
        speedUnit: "km/h",
        lengthUnit: "km",
        temperatureUnit: "kelvin",
        elapsedRecordField: true,
        mode: "both",
      });

      // Parse your file
      fitParser.parse(e?.target?.result, function (error, data) {
        // Handle result of parse method
        if (error) {
          console.log(error);
        } else {
          onChange(data, file);
        }
      });
    };
  };
  return (
    <FileUploader
      handleChange={handleChange}
      classes="h-full w-full flex-1"
      name="file"
      types={fileTypes}
      label={false}
      fileOrFiles={fileOrFiles}
      hoverTitle={false}
      multiple={false}
      onDraggingStateChange={handleDragStateChange}
    >
      <DropZone />
    </FileUploader>
  );
}

function DropZone({ }) {
  return (
    <div
      className={`bgroup cursor-pointer text-white flex flex-col items-center justify-center p-12 border-dashed border-2 border-slate-300 rounded-md border h-full absolute w-full border-opacity-30`}
    >
      <h1 className={`text-lg text-center`}>
        Drag and drop a FIT file, or <span className="underline">browse</span>
      </h1>
    </div>
  );
}

function DroppedFile({ startOver, data }) {
  const [stacked, setStacked] = React.useState(true);

  let handleViewChange = (value) => {
    setStacked(value === "stacked" ? true : false);
  };
  return (
    <div className="w-full flex flex-col items-center">
      <div className="w-full flex items-stretch">
        <button
          onClick={startOver}
          style={{ height: 42 }}
          className="mr-4 shrink-0 flex align-center gap-1 bg-gray-600 py-2 px-3 text-regular capitalize rounded text-white border border-gray-500"
        >
          <ResetIcon />
          <span className="hidden sm:block">Start over</span>
        </button>
        <ViewSwitch onChange={handleViewChange} />
      </div>
      <div className="w-full">
        {stacked ? (
          <ChartStacked data={data} />
        ) : (
          <ChartOverlayed data={data} />
        )}
      </div>
    </div>
  );
}

function LandingHeader() {
  return (
    <div className="flex flex-col py-6">
      <h1 className="text-5xl mb-1 font-bold tracking-tight w-full">
        Fit File Viewer
      </h1>
      <p className="text-xl font-regular text-white w-full mb-4">
        Turn FIT files into beautiful charts.
      </p>
      <div></div>

    </div>
  );
}

function DataHeader({ data }) {
  return (
    <div className="flex flex-col w-full">
      <h1 className="text-xl w-full font-semibold w-full">{data?.fileName}</h1>
      <h1 className="text-sm font-regular text-white w-full text-gray-400">
        {new Intl.DateTimeFormat("en-us", {
          timeStyle: "long",
          dateStyle: "short",
        }).format(data?.data?.activity?.timestamp)}
      </h1>
    </div>
  );
}

function ResetIcon() {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="currentColor"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M13.5 21C15.28 21 17.0201 20.4722 18.5001 19.4832C19.9802 18.4943 21.1337 17.0887 21.8149 15.4442C22.4961 13.7996 22.6743 11.99 22.3271 10.2442C21.9798 8.49836 21.1226 6.89472 19.864 5.63604C18.6053 4.37737 17.0016 3.5202 15.2558 3.17294C13.51 2.82567 11.7004 3.0039 10.0558 3.68509C8.41131 4.36628 7.00571 5.51983 6.01677 6.99987C5.02784 8.47991 4.5 10.22 4.5 12V16.65L1.8 13.95L0.75 15L5.25 19.5L9.75 15L8.7 13.95L6 16.65V12C6 10.5166 6.43987 9.0666 7.26398 7.83323C8.08809 6.59986 9.25943 5.63856 10.6299 5.07091C12.0003 4.50325 13.5083 4.35473 14.9632 4.64411C16.418 4.9335 17.7544 5.64781 18.8033 6.6967C19.8522 7.7456 20.5665 9.08197 20.8559 10.5368C21.1453 11.9917 20.9968 13.4997 20.4291 14.8701C19.8614 16.2406 18.9001 17.4119 17.6668 18.236C16.4334 19.0601 14.9834 19.5 13.5 19.5V21Z" />
    </svg>
  );
}
